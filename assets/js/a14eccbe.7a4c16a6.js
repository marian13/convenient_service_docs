"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[7725],{4308:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var n=r(4848),i=r(8453);const t={slug:"/basics/steps_evaluation_table",sidebar_position:9,title:"Steps evaluation table"},c=void 0,l={id:"basics/steps_evaluation_table",title:"Steps evaluation table",description:"This page contains a table of demonstrative examples of how different step combinations are evaluated in services.",source:"@site/docs/basics/steps_evaluation_table.mdx",sourceDirName:"basics",slug:"/basics/steps_evaluation_table",permalink:"/basics/steps_evaluation_table",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/basics/steps_evaluation_table.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{slug:"/basics/steps_evaluation_table",sidebar_position:9,title:"Steps evaluation table"},sidebar:"docs",previous:{title:"Steps translation table",permalink:"/basics/step_to_result_translation_table"},next:{title:"Guides",permalink:"/category/guides"}},a={},d=[{value:"Service without steps",id:"service-without-steps",level:3},{value:"Service with a step that has a <code>success</code> result",id:"service-with-a-step-that-has-a-success-result",level:3},{value:"Service with a step that has a <code>failure</code> result",id:"service-with-a-step-that-has-a-failure-result",level:3},{value:"Service with a step that has an <code>error</code> result",id:"service-with-a-step-that-has-an-error-result",level:3},{value:"Service with a negated step that has a <code>success</code> result",id:"service-with-a-negated-step-that-has-a-success-result",level:3},{value:"Service with a negated step that has a <code>failure</code> result",id:"service-with-a-negated-step-that-has-a-failure-result",level:3},{value:"Service with a negated step that has an <code>error</code> result",id:"service-with-a-negated-step-that-has-an-error-result",level:3},{value:"Service with multiple consecutive steps, all with a <code>success</code> result",id:"service-with-multiple-consecutive-steps-all-with-a-success-result",level:3},{value:"Service with multiple consecutive steps, last with <code>failure</code> result",id:"service-with-multiple-consecutive-steps-last-with-failure-result",level:3},{value:"Service with multiple consecutive steps, last with <code>error</code> result",id:"service-with-multiple-consecutive-steps-last-with-error-result",level:3},{value:"Service with multiple consecutive steps, intermediate with <code>failure</code> result",id:"service-with-multiple-consecutive-steps-intermediate-with-failure-result",level:3},{value:"Service with multiple consecutive steps, intermediate with <code>error</code> result",id:"service-with-multiple-consecutive-steps-intermediate-with-error-result",level:3},{value:"Service with multiple consecutive steps, first with a <code>failure</code> result",id:"service-with-multiple-consecutive-steps-first-with-a-failure-result",level:3},{value:"Service with multiple consecutive steps, first with an <code>error</code> result",id:"service-with-multiple-consecutive-steps-first-with-an-error-result",level:3},{value:"Service with multiple alternative steps, all with a <code>success</code> result",id:"service-with-multiple-alternative-steps-all-with-a-success-result",level:3},{value:"Service with multiple alternative steps, first with <code>failure</code> result",id:"service-with-multiple-alternative-steps-first-with-failure-result",level:3},{value:"Service with multiple alternative steps, first with an <code>error</code> result",id:"service-with-multiple-alternative-steps-first-with-an-error-result",level:3},{value:"Service with multiple alternative steps, first and intermediate with <code>failure</code> result",id:"service-with-multiple-alternative-steps-first-and-intermediate-with-failure-result",level:3},{value:"Service with multiple alternative steps, first and intermediate with <code>error</code> result",id:"service-with-multiple-alternative-steps-first-and-intermediate-with-error-result",level:3},{value:"Service with multiple alternative steps, first with <code>failure</code> result, intermediate with <code>error</code> result",id:"service-with-multiple-alternative-steps-first-with-failure-result-intermediate-with-error-result",level:3},{value:"Service with multiple alternative steps, first with <code>error</code> result, intermediate with <code>failure</code> result",id:"service-with-multiple-alternative-steps-first-with-error-result-intermediate-with-failure-result",level:3},{value:"Service with multiple alternative steps, all with a <code>failure</code> result",id:"service-with-multiple-alternative-steps-all-with-a-failure-result",level:3},{value:"Service with multiple alternative steps, all with an <code>error</code> result",id:"service-with-multiple-alternative-steps-all-with-an-error-result",level:3},{value:"Complex combination of consecutive steps, negated steps, and alternative steps without evaluated <code>errors</code>.",id:"complex-combination-of-consecutive-steps-negated-steps-and-alternative-steps-without-evaluated-errors",level:3},{value:"Complex combination of consecutive steps, negated steps, and alternative steps with evaluated <code>errors</code>.",id:"complex-combination-of-consecutive-steps-negated-steps-and-alternative-steps-with-evaluated-errors",level:3}];function u(e){const s={admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.p,{children:"This page contains a table of demonstrative examples of how different step combinations are evaluated in services."}),"\n",(0,n.jsx)(s.p,{children:"It is especially useful for newcomers who are not familiar with the Convenient Service DSL yet."}),"\n",(0,n.jsx)(s.p,{children:"Before moving to the concrete examples, let's define some simple services that we are going to reuse."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class SuccessService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n"})}),"\n",(0,n.jsxs)(s.p,{children:["As you can see, the ",(0,n.jsx)(s.code,{children:"SuccessService"})," is just a regular service that always returns a ",(0,n.jsx)(s.code,{children:"success"})," result."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class FailureService\n  include ConvenientService::Standard::Config\n\n  def result\n    failure\n  end\nend\n"})}),"\n",(0,n.jsxs)(s.p,{children:["In turn, the ",(0,n.jsx)(s.code,{children:"FailureService"})," returns a ",(0,n.jsx)(s.code,{children:"failure"})," result all the time."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class ErrorService\n  include ConvenientService::Standard::Config\n\n  def result\n    error\n  end\nend\n"})}),"\n",(0,n.jsxs)(s.p,{children:["And finally, the ",(0,n.jsx)(s.code,{children:"ErrorService"})," returns an ",(0,n.jsx)(s.code,{children:"error"})," result whenever it is invoked."]}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsx)(s.p,{children:"All the examples on this page are using service steps."}),(0,n.jsx)(s.p,{children:"But it is also perfectly valid to use corresponding method steps in them."}),(0,n.jsx)(s.p,{children:"The behavior stays the same for both cases."}),(0,n.jsx)(s.p,{children:"Consider the following snippet."}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step SuccessService # 0 - Evaluated.\n\n  step FailureService # 1 - Evaluated.\n\n  step ErrorService # 2 - Skipped.\nend\n\nService.result\n# => <Service::Result status: :failure>\n\nService.result.step\n# => <Service::Step service: FailureService>\n\nService.result.step.index\n# => 1\n"})}),(0,n.jsx)(s.p,{children:'Its "equivalent" with the methods steps is the code below.'}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step :success_method # 0 - Evaluated.\n\n  step :failure_method # 1 - Evaluated.\n\n  step :error_method # 2 - Skipped.\n\n  def success_method\n    success\n  end\n\n  def failure_method\n failure\n  end\n\n  def error_method\n error\n  end\nend\n\nService.result\n# => <Service::Result status: :failure>\n\nService.result.step\n# => <Service::Step method: :failure_method>\n\nService.result.step.index\n# => 1\n"})}),(0,n.jsx)(s.p,{children:"Both of them have the same evaluated and skipped steps."})]}),"\n",(0,n.jsx)(s.h3,{id:"service-without-steps",children:"Service without steps"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  def result # Evaluated.\n    success\n  end\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :success>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => nil\n"})}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-a-step-that-has-a-success-result",children:["Service with a step that has a ",(0,n.jsx)(s.code,{children:"success"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step SuccessService # Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :success>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: SuccessService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-a-step-that-has-a-failure-result",children:["Service with a step that has a ",(0,n.jsx)(s.code,{children:"failure"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step FailureService # Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :failure>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: FailureService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-a-step-that-has-an-error-result",children:["Service with a step that has an ",(0,n.jsx)(s.code,{children:"error"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step ErrorService # Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-a-negated-step-that-has-a-success-result",children:["Service with a negated step that has a ",(0,n.jsx)(s.code,{children:"success"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  not_step  SuccessService # Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'Service.result\n# => <Service::Result status: :failure message: "Original `result` is `success`">\n'})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: SuccessService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:["Negation of a ",(0,n.jsx)(s.code,{children:"success"})," result is a ",(0,n.jsx)(s.code,{children:"failure"})," result."]})}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-a-negated-step-that-has-a-failure-result",children:["Service with a negated step that has a ",(0,n.jsx)(s.code,{children:"failure"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  not_step  FailureService # Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'Service.result\n# => <Service::Result status: :success message: "Original `result` is `failure`">\n'})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: FailureService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:["Negation of a ",(0,n.jsx)(s.code,{children:"failure"})," result is a ",(0,n.jsx)(s.code,{children:"success"})," result."]})}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-a-negated-step-that-has-an-error-result",children:["Service with a negated step that has an ",(0,n.jsx)(s.code,{children:"error"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  not_step  ErrorService # Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"error"})," results are semantically close to the exceptions."]}),(0,n.jsx)(s.p,{children:"That is why they do not have negated results."})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-consecutive-steps-all-with-a-success-result",children:["Service with multiple consecutive steps, all with a ",(0,n.jsx)(s.code,{children:"success"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step SuccessService # 0 - Evaluated.\n\n  step SuccessService # 1 - Evaluated.\n\n  step SuccessService # 2 - Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :success>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: SuccessService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 2\n"})}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-consecutive-steps-last-with-failure-result",children:["Service with multiple consecutive steps, last with ",(0,n.jsx)(s.code,{children:"failure"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step SuccessService # 0 - Evaluated.\n\n  step SuccessService # 1 - Evaluated.\n\n  step FailureService # 2 - Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :failure>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: FailureService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 2\n"})}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-consecutive-steps-last-with-error-result",children:["Service with multiple consecutive steps, last with ",(0,n.jsx)(s.code,{children:"error"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step SuccessService # 0 - Evaluated.\n\n  step SuccessService # 1 - Evaluated.\n\n  step ErrorService # 2 - Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 2\n"})}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-consecutive-steps-intermediate-with-failure-result",children:["Service with multiple consecutive steps, intermediate with ",(0,n.jsx)(s.code,{children:"failure"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step SuccessService # 0 - Evaluated.\n\n  step FailureService # 1 - Evaluated.\n\n  step SuccessService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :failure>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: FailureService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 1\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the consecutive steps, there are no differences between the steps that have ",(0,n.jsx)(s.code,{children:"failure"})," and ",(0,n.jsx)(s.code,{children:"error"})," results."]}),(0,n.jsx)(s.p,{children:"Both of them stop the sequence immediately and skip the rest of the steps."})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-consecutive-steps-intermediate-with-error-result",children:["Service with multiple consecutive steps, intermediate with ",(0,n.jsx)(s.code,{children:"error"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step SuccessService # 0 - Evaluated.\n\n  step ErrorService # 1 - Evaluated.\n\n  step SuccessService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 1\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the consecutive steps, there are no differences between the steps that have ",(0,n.jsx)(s.code,{children:"failure"})," and ",(0,n.jsx)(s.code,{children:"error"})," results."]}),(0,n.jsx)(s.p,{children:"Both of them stop the sequence immediately and skip the rest of the steps."})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-consecutive-steps-first-with-a-failure-result",children:["Service with multiple consecutive steps, first with a ",(0,n.jsx)(s.code,{children:"failure"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step FailureService # 0 - Evaluated.\n\n  step SuccessService # 1 - Skipped.\n\n  step SuccessService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :failure>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: FailureService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the consecutive steps, there are no differences between the steps that have ",(0,n.jsx)(s.code,{children:"failure"})," and ",(0,n.jsx)(s.code,{children:"error"})," results."]}),(0,n.jsx)(s.p,{children:"Both of them stop the sequence immediately and skip the rest of the steps."})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-consecutive-steps-first-with-an-error-result",children:["Service with multiple consecutive steps, first with an ",(0,n.jsx)(s.code,{children:"error"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step ErrorService # 0 - Evaluated.\n\n  step SuccessService # 1 - Skipped.\n\n  step SuccessService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the consecutive steps, there are no differences between the steps that have ",(0,n.jsx)(s.code,{children:"failure"})," and ",(0,n.jsx)(s.code,{children:"error"})," results."]}),(0,n.jsx)(s.p,{children:"Both of them stop the sequence immediately and skip the rest of the steps."})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-alternative-steps-all-with-a-success-result",children:["Service with multiple alternative steps, all with a ",(0,n.jsx)(s.code,{children:"success"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step SuccessService # 0 - Evaluated.\n\n  or_step  SuccessService # 1 - Skipped.\n\n  or_step  SuccessService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :success>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: SuccessService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-alternative-steps-first-with-failure-result",children:["Service with multiple alternative steps, first with ",(0,n.jsx)(s.code,{children:"failure"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step FailureService # 0 - Evaluated.\n\n  or_step  SuccessService # 1 - Evaluated.\n\n  or_step  SuccessService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :success>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: SuccessService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 1\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the alternative steps, only the steps with ",(0,n.jsx)(s.code,{children:"error"})," results stop the sequence."]}),(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"failure"})," steps initiate the next available ",(0,n.jsx)(s.code,{children:"or_step"}),"."]})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-alternative-steps-first-with-an-error-result",children:["Service with multiple alternative steps, first with an ",(0,n.jsx)(s.code,{children:"error"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step ErrorService # 0 - Evaluated.\n\n  or_step  SuccessService # 1 - Skipped.\n\n  or_step  SuccessService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the alternative steps, only the steps with ",(0,n.jsx)(s.code,{children:"error"})," results stop the sequence."]}),(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"failure"})," steps initiate the next available ",(0,n.jsx)(s.code,{children:"or_step"}),"."]})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-alternative-steps-first-and-intermediate-with-failure-result",children:["Service with multiple alternative steps, first and intermediate with ",(0,n.jsx)(s.code,{children:"failure"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step FailureService # 0 - Evaluated.\n\n  or_step  FailureService # 1 - Evaluated.\n\n  or_step  SuccessService # 2 - Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :success>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: SuccessService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 2\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the alternative steps, only the steps with ",(0,n.jsx)(s.code,{children:"error"})," results stop the sequence."]}),(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"failure"})," steps initiate the next available ",(0,n.jsx)(s.code,{children:"or_step"}),"."]})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-alternative-steps-first-and-intermediate-with-error-result",children:["Service with multiple alternative steps, first and intermediate with ",(0,n.jsx)(s.code,{children:"error"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step ErrorService # 0 - Evaluated.\n\n  or_step  ErrorService # 1 - Skipped.\n\n  or_step  SuccessService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the alternative steps, only the steps with ",(0,n.jsx)(s.code,{children:"error"})," results stop the sequence."]}),(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"failure"})," steps initiate the next available ",(0,n.jsx)(s.code,{children:"or_step"}),"."]})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-alternative-steps-first-with-failure-result-intermediate-with-error-result",children:["Service with multiple alternative steps, first with ",(0,n.jsx)(s.code,{children:"failure"})," result, intermediate with ",(0,n.jsx)(s.code,{children:"error"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step FailureService # 0 - Evaluated.\n\n  or_step  ErrorService # 1 - Evaluated.\n\n  or_step  SuccessService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 1\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the alternative steps, only the steps with ",(0,n.jsx)(s.code,{children:"error"})," results stop the sequence."]}),(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"failure"})," steps initiate the next available ",(0,n.jsx)(s.code,{children:"or_step"}),"."]})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-alternative-steps-first-with-error-result-intermediate-with-failure-result",children:["Service with multiple alternative steps, first with ",(0,n.jsx)(s.code,{children:"error"})," result, intermediate with ",(0,n.jsx)(s.code,{children:"failure"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step ErrorService # 0 - Evaluated.\n\n  or_step  FailureService # 1 - Skipped.\n\n  or_step  SuccessService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the alternative steps, only the steps with ",(0,n.jsx)(s.code,{children:"error"})," results stop the sequence."]}),(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"failure"})," steps initiate the next available ",(0,n.jsx)(s.code,{children:"or_step"}),"."]})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-alternative-steps-all-with-a-failure-result",children:["Service with multiple alternative steps, all with a ",(0,n.jsx)(s.code,{children:"failure"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step FailureService # 0 - Evaluated.\n\n  or_step  FailureService # 1 - Evaluated.\n\n  or_step  FailureService # 2 - Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :failure>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: FailureService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 2\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the alternative steps, only the steps with ",(0,n.jsx)(s.code,{children:"error"})," results stop the sequence."]}),(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"failure"})," steps initiate the next available ",(0,n.jsx)(s.code,{children:"or_step"}),"."]})]}),"\n",(0,n.jsxs)(s.h3,{id:"service-with-multiple-alternative-steps-all-with-an-error-result",children:["Service with multiple alternative steps, all with an ",(0,n.jsx)(s.code,{children:"error"})," result"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step ErrorService # 0 - Evaluated.\n\n  or_step  ErrorService # 1 - Skipped.\n\n  or_step  ErrorService # 2 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 0\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["For the alternative steps, only the steps with ",(0,n.jsx)(s.code,{children:"error"})," results stop the sequence."]}),(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"failure"})," steps initiate the next available ",(0,n.jsx)(s.code,{children:"or_step"}),"."]})]}),"\n",(0,n.jsxs)(s.h3,{id:"complex-combination-of-consecutive-steps-negated-steps-and-alternative-steps-without-evaluated-errors",children:["Complex combination of consecutive steps, negated steps, and alternative steps without evaluated ",(0,n.jsx)(s.code,{children:"errors"}),"."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step FailureService # 0 - Evaluated.\n\n  or_step  FailureService # 1 - Evaluated.\n\n  or_step  SuccessService # 2 - Evaluated.\n\n  step SuccessService # 3 - Evaluated.\n\n  and_step SuccessService # 4 - Evaluated.\n\n  and_not_step FailureService # 5 - Evaluated.\n\n  step FailureService # 6 - Evaluated.\n\n  or_step  SuccessService # 7 - Evaluated.\n\n  step FailureService # 8 - Evaluated.\n\n  or_step  FailureService # 9 - Evaluated.\n\n  or_not_step FailureService # 10 - Evaluated.\n\n  or_step  ErrorService # 11 - Skipped.\n\n  step SuccessService # 12 - Evaluated.\n\n  not_step  SuccessService # 13 - Evaluated.\n\n  or_step  FailureService # 14 - Evaluated.\n\n  or_not_step FailureService # 15 - Evaluated.\n\n  or_step  FailureService # 16 - Skipped.\n\n  or_step  ErrorService # 17 - Skipped.\n\n  or_step  SuccessService # 18 - Skipped.\n\n  step SuccessService # 19 - Evaluated.\n\n  and_step SuccessService # 20 - Evaluated.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :success>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: SuccessService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 20\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"and_step"})," directive is just an alias to the usual ",(0,n.jsx)(s.code,{children:"step"}),"."]}),(0,n.jsx)(s.p,{children:"The only difference is that it can not be used as the first step."})]}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"and_not_step"})," directive is just an alias to the usual ",(0,n.jsx)(s.code,{children:"not_step"}),"."]}),(0,n.jsx)(s.p,{children:"The only difference is that it can not be used as the first step."})]}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"or_not_step"})," directive works like the ",(0,n.jsx)(s.code,{children:"or_step"}),", but it firstly negates its result."]})}),"\n",(0,n.jsxs)(s.h3,{id:"complex-combination-of-consecutive-steps-negated-steps-and-alternative-steps-with-evaluated-errors",children:["Complex combination of consecutive steps, negated steps, and alternative steps with evaluated ",(0,n.jsx)(s.code,{children:"errors"}),"."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step FailureService # 0 - Evaluated.\n\n  or_step  FailureService # 1 - Evaluated.\n\n  or_step  SuccessService # 2 - Evaluated.\n\n  step SuccessService # 3 - Evaluated.\n\n  and_step SuccessService # 4 - Evaluated.\n\n  and_not_step FailureService # 5 - Evaluated.\n\n  step FailureService # 6 - Evaluated.\n\n  or_step  ErrorService # 7 - Evaluated.\n\n  step FailureService # 8 - Skipped.\n\n  or_step  FailureService # 9 - Skipped.\n\n  or_not_step FailureService # 10 - Skipped.\n\n  or_step  ErrorService # 11 - Skipped.\n\n  step SuccessService # 12 - Skipped.\n\n  not_step  SuccessService # 13 - Skipped.\n\n  or_step  FailureService # 14 - Skipped.\n\n  or_not_step FailureService # 15 - Skipped.\n\n  or_step  FailureService # 16 - Skipped.\n\n  or_step  ErrorService # 17 - Skipped.\n\n  or_step  SuccessService # 18 - Skipped.\n\n  step SuccessService # 19 - Skipped.\n\n  and_step SuccessService # 20 - Skipped.\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Outcome:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result\n# => <Service::Result status: :error>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step\n# => <Service::Step service: ErrorService>\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"Service.result.step.index\n# => 7\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["The first evaluated ",(0,n.jsx)(s.code,{children:"error"})," step is always a sequence stopper."]}),(0,n.jsx)(s.p,{children:"No matter how many other steps are coming after it."}),(0,n.jsx)(s.p,{children:"No matter which exact types they have."}),(0,n.jsx)(s.p,{children:"None of them are executed, they are just skipped."}),(0,n.jsxs)(s.p,{children:["In other words, the first evaluated ",(0,n.jsx)(s.code,{children:"error"})," step is always the whole service's last evaluated step in any circumstances."]})]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>c,x:()=>l});var n=r(6540);const i={},t=n.createContext(i);function c(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);