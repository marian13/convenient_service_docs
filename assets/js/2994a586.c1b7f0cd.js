"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[8419],{6824:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var t=n(4848),i=n(8453);const r={slug:"/guides/testing/how_to_test_regular_service",sidebar_position:1,title:"How to test a regular service?"},c=void 0,l={id:"guides/testing/how_to_test_regular_service",title:"How to test a regular service?",description:"Consider a simple regular service - AssertFileExists.",source:"@site/docs/guides/testing/how_to_test_regular_service.mdx",sourceDirName:"guides/testing",slug:"/guides/testing/how_to_test_regular_service",permalink:"/guides/testing/how_to_test_regular_service",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/testing/how_to_test_regular_service.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/guides/testing/how_to_test_regular_service",sidebar_position:1,title:"How to test a regular service?"},sidebar:"docs",previous:{title:"Testing",permalink:"/category/testing"},next:{title:"How to test a service with steps?",permalink:"/guides/testing/how_to_test_service_with_steps"}},o={},a=[{value:"How to test a regular service with RSpec?",id:"how-to-test-a-regular-service-with-rspec",level:2}];function d(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["Consider a simple regular service - ",(0,t.jsx)(s.code,{children:"AssertFileExists"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["As its name states, it ensures that a file with a specific ",(0,t.jsx)(s.code,{children:"path"})," exists."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'class AssertFileExists\n  include ConvenientService::Standard::Config\n\n  attr_reader :path\n\n  def initialize(path:)\n    @path = path\n  end\n\n  def result\n    return error("Path is `nil`") if path.nil?\n    return error("Path is empty") if path.empty?\n\n    return failure("File with path `#{path}` does NOT exist") unless ::File.exist?(path)\n\n    success\n  end\nend\n'})}),"\n",(0,t.jsxs)(s.p,{children:["To be more precise, it returns the ",(0,t.jsx)(s.code,{children:"success"})," result when we are 100% sure that the corresponding file actually exists in the underlying operation system."]}),"\n",(0,t.jsxs)(s.p,{children:["When it returns the ",(0,t.jsx)(s.code,{children:"failure"})," result, then we are totally confident in the opposite."]}),"\n",(0,t.jsxs)(s.p,{children:["Last but not least, the ",(0,t.jsx)(s.code,{children:"error"})," result is returned when there is NO way to confirm or deny the file's existence."]}),"\n",(0,t.jsxs)(s.p,{children:["Together, all those results define the overall behavior of the ",(0,t.jsx)(s.code,{children:"AssertFileExists"})," service."]}),"\n",(0,t.jsx)(s.p,{children:"Having this information we are ready to start the testing process."}),"\n",(0,t.jsx)(s.h2,{id:"how-to-test-a-regular-service-with-rspec",children:"How to test a regular service with RSpec?"}),"\n",(0,t.jsx)(s.p,{children:"First of all, let's create a spec file."}),"\n",(0,t.jsxs)(s.p,{children:["Imagine the original service is stored in ",(0,t.jsx)(s.code,{children:"app/services/assert_file_exists.rb"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Then its specs are usually living in ",(0,t.jsx)(s.code,{children:"spec/services/assert_file_exists_spec.rb"})," by ",(0,t.jsx)(s.a,{href:"https://rspec.info/features/7-0/rspec-rails/directory-structure",children:"convention"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"This is a quick command of how to create it."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"mkdir -p spec/services && touch spec/services/assert_file_exists_spec.rb\n"})}),"\n",(0,t.jsxs)(s.p,{children:["As the next step, we are going to require a ",(0,t.jsx)(s.a,{href:"https://medium.com/@brett_codes/rspecs-spec-helper-vs-rails-helper-explained-2337282d14ce",children:"spec_helper"})," and add a top-level ",(0,t.jsx)(s.a,{href:"https://rspec.info/features/3-12/rspec-core/example-groups/basic-structure",children:"describe"})," with the service class into it."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",metastring:'title="spec/services/assert_file_exists_spec.rb"',children:'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n\nend\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Then, we introduce a so-called ",(0,t.jsx)(s.a,{href:"https://rspec.info/documentation/3.0/rspec-core/RSpec/Core/ExampleGroup.html#context-class_method",children:"example group"})," for the class methods."]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsxs)(s.p,{children:["RSpec ",(0,t.jsx)(s.a,{href:"https://rspec.info/documentation/3.0/rspec-core/RSpec/Core/ExampleGroup.html#context-class_method",children:"example_group"})," and ",(0,t.jsx)(s.a,{href:"https://rspec.info/documentation/3.0/rspec-core/RSpec/Core/ExampleGroup.html#context-class_method",children:"context"})," are just aliases."]})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",metastring:'title="spec/services/assert_file_exists_spec.rb"',children:'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n  example_group "class methods" do\n\n  end\nend\n'})}),"\n",(0,t.jsxs)(s.p,{children:["It may seem redundant to define such an example group, but it is already kind of a pattern in specs for services created by the ",(0,t.jsx)(s.a,{href:"/",children:"Convenient Servive"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"You will see the real benefit of it once we review the testing of more complex services."}),"\n",(0,t.jsxs)(s.p,{children:["Coming back to the ",(0,t.jsx)(s.code,{children:"AssertFileExists"}),", most of the time we interact with it using its ",(0,t.jsx)(s.code,{children:"result"})," class method, which is why we add a corresponding ",(0,t.jsx)(s.a,{href:"https://www.betterspecs.org/#describe",children:"context"})," for it."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",metastring:'title="spec/services/assert_file_exists_spec.rb"',children:'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n  example_group "class methods" do\n    context ".result" do\n\n    end\n  end\nend\n'})}),"\n",(0,t.jsx)(s.p,{children:"Next, when looking from the most narrow perspective, a service is either successful or not successful."}),"\n",(0,t.jsx)(s.p,{children:"So we reflect that point with two more contexts."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",metastring:'title="spec/services/assert_file_exists_spec.rb"',children:'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n  example_group "class methods" do\n    describe ".result" do\n      context "when `AssertFileExists` is NOT successful" do\n\n      end\n\n      context "when `AssertFileExists` is successful" do\n\n      end\n    end\n  end\nend\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Also ",(0,t.jsx)(s.a,{href:"/",children:"Convenient Service"})," provides some ready-to-use custom ",(0,t.jsx)(s.a,{href:"https://rspec.info/features/3-12/rspec-expectations/built-in-matchers",children:"RSpec matchers"})," to verify service results."]}),"\n",(0,t.jsx)(s.p,{children:"They can be included as follows."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",metastring:'title="spec/services/assert_file_exists_spec.rb"',children:'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n  include ConvenientService::RSpec::Matchers::Results\n\n  example_group "class methods" do\n    describe ".result" do\n      context "when `AssertFileExists` is NOT successful" do\n\n      end\n\n      context "when `AssertFileExists` is successful" do\n\n      end\n    end\n  end\nend\n'})}),"\n",(0,t.jsx)(s.p,{children:"Now, we have just built the basic service specs boilerplate code."}),"\n",(0,t.jsx)(s.p,{children:"It will be almost the same in most of the cases, so feel free to come back to this page and copy this template whenever you test a new service."}),"\n",(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsxs)(s.p,{children:["Specs boilerplate ",(0,t.jsx)(s.a,{href:"https://guides.rubyonrails.org/generators.html#creating-generators-with-generators",children:"generators"})," are planned for the future ",(0,t.jsx)(s.a,{href:"/",children:"Convenient Service"})," versions."]}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"bundle exec rails generate convenient_service service AssertFileExists\n#     create  lib/services/assert_file_exists.rb\n#     invoke  rspec\n#       create    spec/lib/services/assert_file_exists_spec.rb\n"})})]}),"\n",(0,t.jsxs)(s.p,{children:["Having the boilerplate already set, let's recall the ",(0,t.jsx)(s.code,{children:"AssertFileExists"})," source to decide which exact tests we need to implement."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'class AssertFileExists\n  include ConvenientService::Standard::Config\n\n  attr_reader :path\n\n  def initialize(path:)\n    @path = path\n  end\n\n  def result\n    return error("Path is `nil`") if path.nil?\n    return error("Path is empty") if path.empty?\n\n    return failure("File with path `#{path}` does NOT exist") unless ::File.exist?(path)\n\n    success\n  end\nend\n'})}),"\n",(0,t.jsxs)(s.p,{children:["This is how an ",(0,t.jsx)(s.code,{children:"it"})," example can be added for the case when ",(0,t.jsx)(s.code,{children:"path"})," is ",(0,t.jsx)(s.code,{children:"nil"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",metastring:'title="spec/services/assert_file_exists_spec.rb"',children:'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n  include ConvenientService::RSpec::Matchers::Results\n\n  example_group "class methods" do\n    describe ".result" do\n      # highlight-start\n      let(:result) { described_class.result(path: path) }\n      # highlight-end\n\n      context "when `AssertFileExists` is NOT successful" do\n        # highlight-start\n        context "when `path` is `nil`" do\n          let(:path) { nil }\n\n          it "returns `error`" do\n            expect(result).to be_error.with_message("Path is `nil`")\n          end\n        end\n        # highlight-end\n      end\n\n      context "when `AssertFileExists` is successful" do\n\n      end\n    end\n  end\nend\n'})}),"\n",(0,t.jsxs)(s.p,{children:["We have utilized RSpec ",(0,t.jsx)(s.a,{href:"https://rspec.info/features/3-12/rspec-core/helper-methods/let",children:"let"})," and ",(0,t.jsx)(s.a,{href:"https://rspec.info/features/3-12/rspec-core/metadata/described-class",children:"described_class"})," to define the service result."]}),"\n",(0,t.jsxs)(s.p,{children:["After that we verified it by a custom matcher ",(0,t.jsx)(s.code,{children:"be_error"})," and its ",(0,t.jsx)(s.code,{children:"with_message"})," chaining."]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"be_error"})," matcher also has ",(0,t.jsx)(s.code,{children:"and_message"}),", ",(0,t.jsx)(s.code,{children:"with_code"}),", and ",(0,t.jsx)(s.code,{children:"and_code"})," chainings."]})}),"\n",(0,t.jsxs)(s.p,{children:["An ",(0,t.jsx)(s.code,{children:"it"})," for the case when ",(0,t.jsx)(s.code,{children:"path"})," is an empty string is very similar."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",metastring:'title="spec/services/assert_file_exists_spec.rb"',children:'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n  include ConvenientService::RSpec::Matchers::Results\n\n  example_group "class methods" do\n    describe ".result" do\n      let(:result) { described_class.result(path: path) }\n\n      context "when `AssertFileExists` is NOT successful" do\n        context "when `path` is `nil`" do\n          let(:path) { nil }\n\n          it "returns `error`" do\n            expect(result).to be_error.with_message("Path is `nil`")\n          end\n        end\n\n        # highlight-start\n        context "when `path` is empty" do\n          let(:path) { nil }\n\n          it "returns `error`" do\n            expect(result).to be_error.with_message("Path is empty")\n          end\n        end\n        # highlight-end\n      end\n\n      context "when `AssertFileExists` is successful" do\n\n      end\n    end\n  end\nend\n'})}),"\n",(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsx)(s.p,{children:"You may be curious, why custom matchers?"}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'expect(result).to be_error.with_message("Path is empty")\n'})}),(0,t.jsx)(s.p,{children:"Instead of RSpec built-in alternatives?"}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'expect(result).to be_error?\nexpect(result.message).to eq("Path is empty")\n'})}),(0,t.jsx)(s.p,{children:"Usage of the custom matchers helps avoid paying too much attention to unnecessary technical details when they are not so important."}),(0,t.jsxs)(s.p,{children:["For example, it is common to forget that ",(0,t.jsx)(s.code,{children:"expect(result.message)"})," raises an exception since ",(0,t.jsx)(s.code,{children:"message"})," is accessed before the ",(0,t.jsx)(s.code,{children:"result"})," status is checked."]}),(0,t.jsxs)(s.p,{children:["Moreover ",(0,t.jsx)(s.code,{children:"result.message"})," is not a string, it is a string-like object, so even when the status is already checked, ",(0,t.jsx)(s.code,{children:'expect(result.message).to eq("Path is empty")'})," will still not work."]})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"failure"})," when the file does not exist may be checked as follows."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",metastring:'title="spec/services/assert_file_exists_spec.rb"',children:'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n  include ConvenientService::RSpec::Matchers::Results\n\n  example_group "class methods" do\n    describe ".result" do\n      let(:result) { described_class.result(path: path) }\n\n      context "when `AssertFileExists` is NOT successful" do\n        context "when `path` is `nil`" do...\n        end\n\n        context "when `path` is empty" do...\n        end\n\n        # highlight-start\n        context "when file with `path` does NOT exist" do\n          let(:path) { "non_existing_path" }\n\n          it "returns `failure`" do\n            expect(result).to be_failure.with_message("File with path `#{path}` does NOT exist")\n          end\n        end\n        # highlight-end\n      end\n\n      context "when `AssertFileExists` is successful" do\n\n      end\n    end\n  end\nend\n'})}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"be_failure"})," matcher also has ",(0,t.jsx)(s.code,{children:"and_message"}),", ",(0,t.jsx)(s.code,{children:"with_code"}),", and ",(0,t.jsx)(s.code,{children:"and_code"})," chainings."]})}),"\n",(0,t.jsxs)(s.p,{children:["And finally, the ",(0,t.jsx)(s.code,{children:"success"})," case."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",metastring:'title="spec/services/assert_file_exists_spec.rb"',children:'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n  include ConvenientService::RSpec::Matchers::Results\n\n  example_group "class methods" do\n    describe ".result" do\n      let(:result) { described_class.result(path: path) }\n\n      context "when `AssertFileExists` is NOT successful" do\n        context "when `path` is `nil`" do...\n        end\n\n        context "when `path` is empty" do...\n        end\n\n        context "when file with `path` does NOT exist" do...\n        end\n      end\n\n      context "when `AssertFileExists` is successful" do\n        # highlight-start\n        ##\n        # NOTE: Tempfile uses its own `let` in order to prevent its premature garbage collection.\n        #\n        let(:tempfile) { Tempfile.new }\n        let(:path) { tempfile.path }\n\n        it "returns `success`" do\n          expect(result).to be_success.without_data\n        end\n        # highlight-end\n      end\n    end\n  end\nend\n'})}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"be_success"})," matcher also has ",(0,t.jsx)(s.code,{children:"with_data"})," chaining."]})}),"\n",(0,t.jsxs)(s.p,{children:["As you can see, there is nothing extraordinary in writing specs for the regular ",(0,t.jsx)(s.a,{href:"/",children:"Convenient Service"})," services."]}),"\n",(0,t.jsxs)(s.p,{children:["Custom matchers like ",(0,t.jsx)(s.code,{children:"be_success.without_data"}),", ",(0,t.jsx)(s.code,{children:"be_failure.with_message"}),", ",(0,t.jsx)(s.code,{children:"be_error.with_code"})," are intuitive."]}),"\n",(0,t.jsxs)(s.p,{children:["The enclosing boilerplate blocks like ",(0,t.jsx)(s.code,{children:'example_group "class methods"'}),", ",(0,t.jsx)(s.code,{children:'describe ".result"'}),", ",(0,t.jsx)("code",{children:'context "when `Service` is successful"'})," are straightforward."]}),"\n",(0,t.jsx)(s.p,{children:"So once you get familiar with them - reading or adding new service specs becomes a simple routine."})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>l});var t=n(6540);const i={},r=t.createContext(i);function c(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);